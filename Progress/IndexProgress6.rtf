{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red204\green142\blue48;\red77\green159\blue194;\red255\green118\blue250;
\red211\green98\blue213;\red100\green100\blue100;\red86\green167\blue255;\red249\green50\blue23;\red149\green0\blue100;
\red63\green127\blue95;\red192\green138\blue63;}
{\*\expandedcolortbl;;\csgenericrgb\c80000\c55686\c18824;\csgenericrgb\c30196\c62353\c76078;\csgenericrgb\c100000\c46275\c98039;
\csgenericrgb\c82745\c38431\c83529;\csgenericrgb\c39216\c39216\c39216;\csgenericrgb\c33725\c65490\c100000;\csgenericrgb\c97647\c19608\c9020;\csgenericrgb\c58431\c0\c39216;
\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c75294\c54118\c24706;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 import\cf3  java\cf4 .\cf3 io\cf4 .*;\cf0 \
\cf2 import\cf3  java\cf4 .\cf3 util\cf4 .\cf3 ArrayList\cf4 ;\cf0 \
\cf2 import\cf3  java\cf4 .\cf3 util\cf4 .\cf3 HashMap\cf4 ;\cf0 \
\cf2 import\cf3  java\cf4 .\cf3 util\cf4 .\cf3 Map\cf4 .\cf3 Entry\cf4 ;\cf0 \
\cf2 import\cf3  java\cf4 .\cf3 text\cf4 .*;\cf0 \
\
\cf2 import\cf3  org\cf4 .\cf3 apache\cf4 .\cf3 poi\cf4 .\cf3 xwpf\cf4 .\cf3 extractor\cf4 .\cf3 XWPFWordExtractor\cf4 ;\cf0 \
\cf2 import\cf3  org\cf4 .\cf3 apache\cf4 .\cf3 poi\cf4 .\cf3 xwpf\cf4 .\cf3 usermodel\cf4 .\cf3 XWPFDocument\cf4 ;\cf0 \
\cf2 import\cf3  org\cf4 .\cf3 apache\cf4 .\cf3 poi\cf4 .\cf3 xwpf\cf4 .\cf3 usermodel\cf4 .\cf3 XWPFParagraph\cf4 ;\cf0 \
\cf2 import\cf3  org\cf4 .\cf3 apache\cf4 .\cf3 poi\cf4 .\cf3 xwpf\cf4 .\cf3 usermodel\cf4 .\cf3 XWPFRun\cf4 ;\cf0 \
\
\
\
\cf2 public\cf3  \cf2 class\cf3  Indexing \cf5 \{\cf0 \
\cf3 	\cf0 \
\
\cf3 	\cf6 @SuppressWarnings\cf5 (\cf7 \ul \ulc7 "rawtypes"\cf5 \ulnone )\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 void\cf3  main \cf5 (\cf3 String\cf5 []\cf3  args\cf5 )\cf3  \cf2 throws\cf3  IOException \cf5 \{\cf0 \
\cf3 				\cf0 \
\cf3         File inFile \cf4 =\cf3  \cf2 new\cf3  File\cf5 (\cf7 "/Users/travispettrey/Documents/TestingDoc.docx"\cf5 )\cf4 ;\cf0 \
\cf3 		String theText \cf4 =\cf3  \cf8 fileInput\cf5 (\cf3 inFile\cf5 )\cf4 ;\cf0 \
\cf3 		\cf8 fileOutput\cf5 (\cf8 dataProcessing\cf5 (\cf3 theText\cf5 ))\cf4 ;\cf0 \
\cf3 	\cf5 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\
\cf3 		\cf6 @SuppressWarnings\cf5 (\cf7 "resource"\cf5 )\cf0 \
\cf3 		\cf2 public\cf3  \cf2 static\cf3  String fileInput\cf5 (\cf3 File file\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 			String allText \cf4 =\cf3  \cf7 ""\cf4 ;\cf0 \
\cf3 		        \cf2 try\cf3  \cf5 \{\cf0 \
\cf3 		            FileInputStream fis \cf4 =\cf3  \cf2 new\cf3  FileInputStream\cf5 (\cf3 file\cf4 .\cf3 getAbsolutePath\cf5 ())\cf4 ;\cf0 \
\cf3 		            XWPFDocument document \cf4 =\cf3  \cf2 new\cf3  XWPFDocument\cf5 (\cf3 fis\cf5 )\cf4 ;\cf0 \
\cf3 		            XWPFWordExtractor extractor \cf4 =\cf3  \cf2 new\cf3  XWPFWordExtractor\cf5 (\cf3 document\cf5 )\cf4 ;\cf0 \
\cf3 		            allText \cf4 =\cf3  extractor\cf4 .\cf3 getText\cf5 ()\cf4 ;\cf0 \
\cf3 		        \cf5 \}\cf3  \cf2 catch\cf3  \cf5 (\cf3 Exception exep\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 		            exep\cf4 .\cf3 printStackTrace\cf5 ()\cf4 ;\cf0 \
\cf3 		        \cf5 \}\cf0 \
\cf3 	            \cf9 return\cf3  allText\cf4 ;\cf0 \
\cf3 		\cf5 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 		\cf0 \
\cf3 		\cf0 \
\cf3 		\cf0 \
\cf3 		\cf0 \
\cf3 	\cf10 // I still don't like variables wordCount and oneWord, but we'll deal with that later \cf0 \
\cf3 		\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  String\cf5 []\cf3  dataProcessing\cf5 (\cf3 String allText\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 		HashMap\cf4 <\cf3 String\cf4 ,\cf3  ArrayList\cf4 <\cf3 Integer\cf4 >>\cf3  theIndex  \cf4 =\cf3  \cf2 new\cf3  HashMap\cf4 <\cf3 String\cf4 ,\cf3  ArrayList\cf4 <\cf3 Integer\cf4 >>\cf5 ()\cf4 ;\cf0 \
\cf3 		\cf0 \
\cf3 		\cf10 // May be able to pull page number from the DOCUMENT ITSELF\cf0 \
\cf3 		Integer wordCount \cf4 =\cf3  0\cf4 ;\cf0 \
\cf3 		\cf0 \
\cf3 		String oneWord \cf4 =\cf3  \cf7 ""\cf4 ;\cf0 \
\cf3 		\cf2 final\cf3  CharacterIterator it \cf4 =\cf3  \cf2 new\cf3  StringCharacterIterator\cf5 (\cf3 allText\cf5 )\cf4 ;\cf0 \
\cf3 		\cf2 for\cf5 (\cf2 char\cf3  c \cf4 =\cf3  it\cf4 .\cf3 first\cf5 ()\cf4 ;\cf3  c \cf4 !=\cf3  CharacterIterator\cf4 .\cf11 DONE\cf4 ;\cf3  c \cf4 =\cf3  it\cf4 .\cf3 next\cf5 ())\cf3  \cf5 \{\cf0 \
\cf3 			\cf2 if\cf3  \cf5 (\cf3 Character\cf4 .\cf8 isLetter\cf5 (\cf3 c\cf5 ))\cf3  \cf5 \{\cf0 \
\cf3 				oneWord \cf4 +=\cf3  c\cf4 ;\cf0 \
\cf3 			\cf5 \}\cf0 \
\cf3 			\cf2 if\cf3  \cf5 ((\cf4 !\cf3 Character\cf4 .\cf8 isLetter\cf5 (\cf3 c\cf5 ))\cf3  \cf4 &&\cf3  oneWord\cf4 .\cf3 length\cf5 ()\cf3  \cf4 >\cf3  0\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 				wordCount\cf4 ++;\cf0 \
\cf3 				\cf8 indexAddition\cf5 (\cf3 oneWord\cf4 ,\cf3  theIndex\cf4 ,\cf3  wordCount\cf5 )\cf4 ;\cf0 \
\cf3 				oneWord \cf4 =\cf3  \cf7 ""\cf4 ;\cf0 \
\cf3 			\cf5 \}\cf0 \
\cf3 			\cf2 else\cf3  \cf5 \{\cf0 \
\cf3 				\cf2 continue\cf4 ;\cf0 \
\cf3 			\cf5 \}\cf0 \
\cf3 		\cf5 \}\cf0 \
\cf3 		\cf9 return\cf3  \cf8 outputFormating\cf5 (\cf3 theIndex\cf5 )\cf4 ;\cf0 \
\cf3 	\cf5 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf10 //Try n' figure out how to get this to operate w/ dataProcessing in a functional way\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 void\cf3  indexAddition \cf5 (\cf3 String fileString\cf4 ,\cf3  HashMap\cf4 <\cf3 String\cf4 ,\cf3  ArrayList\cf4 <\cf3 Integer\cf4 >>\cf3  theIndex\cf4 ,\cf3  \cf2 int\cf3  wordCount\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 		\cf2 if\cf3  \cf5 (\cf4 !\cf3 theIndex\cf4 .\cf3 containsKey\cf5 (\cf3 fileString\cf5 ))\cf3  \cf5 \{\cf0 \
\cf3 			ArrayList\cf4 <\cf3 Integer\cf4 >\cf3  insides \cf4 =\cf3  \cf2 new\cf3  ArrayList\cf4 <>\cf5 ()\cf4 ;\cf0 \
\cf3 			insides\cf4 .\cf3 add\cf5 (\cf3 wordCount\cf5 )\cf4 ;\cf0 \
\cf3 			theIndex\cf4 .\cf3 put\cf5 (\cf3 fileString\cf4 ,\cf3  insides\cf5 )\cf4 ;\cf0 \
\cf3 		\cf5 \}\cf3  \cf2 else\cf3  \cf5 \{\cf0 \
\cf3 			theIndex\cf4 .\cf3 get\cf5 (\cf3 fileString\cf5 )\cf4 .\cf3 add\cf5 (\cf3 wordCount\cf5 )\cf4 ;\cf0 \
\cf3 		\cf5 \}\cf0 \
\cf3 	\cf5 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 // ABSTRACT METHOD\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf6 @SuppressWarnings\cf5 (\{\cf3  \cf7 "rawtypes"\cf4 ,\cf3  \cf7 "unchecked"\cf3  \cf5 \})\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  String\cf5 []\cf3  outputFormating \cf5 (\cf3 HashMap\cf4 <\cf3 String\cf4 ,\cf3  ArrayList\cf4 <\cf3 Integer\cf4 >>\cf3  daIndex\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 		Integer i \cf4 =\cf3  0\cf4 ;\cf0 \
\cf3 		String\cf5 []\cf3  daOutput \cf4 =\cf3  \cf2 new\cf3  String\cf5 [\cf3 daIndex\cf4 .\cf3 size\cf5 ()]\cf4 ;\cf0 \
\cf3 		java\cf4 .\cf3 util\cf4 .\cf3 Iterator\cf4 <\cf3 Entry\cf4 <\cf3 String\cf4 ,\cf3  ArrayList\cf4 <\cf3 Integer\cf4 >>>\cf3  it \cf4 =\cf3  daIndex\cf4 .\cf3 entrySet\cf5 ()\cf4 .\cf3 iterator\cf5 ()\cf4 ;\cf0 \
\cf3 		\cf2 while\cf3  \cf5 (\cf3 it\cf4 .\cf3 hasNext\cf5 ())\cf3  \cf5 \{\cf0 \
\cf3 			String nums \cf4 =\cf3  \cf7 ""\cf4 ;\cf0 \
\cf3 			HashMap\cf4 .\cf3 Entry entry \cf4 =\cf3  \cf5 (\cf3 HashMap\cf4 .\cf3 Entry\cf5 )\cf3 it\cf4 .\cf3 next\cf5 ()\cf4 ;\cf0 \
\cf3 			nums \cf4 +=\cf3  \cf8 listToString\cf5 ((\cf3 ArrayList\cf4 <\cf3 Integer\cf4 >\cf5 )\cf3  entry\cf4 .\cf3 getValue\cf5 ())\cf4 ;\cf0 \
\cf3 			daOutput\cf5 [\cf3 i\cf5 ]\cf3  \cf4 =\cf3  \cf5 (\cf3 entry\cf4 .\cf3 getKey\cf5 ()\cf3  \cf4 +\cf3  \cf7 ": "\cf3  \cf4 +\cf3  nums\cf5 )\cf4 ;\cf0 \
\cf3 			i\cf4 ++;\cf0 \
\cf3 		\cf5 \}\cf0 \
\cf3 		\cf9 return\cf3  daOutput\cf4 ;\cf0 \
\cf3 	\cf5 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 // ABSTRACT METHOD\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  String listToString \cf5 (\cf3 ArrayList\cf4 <\cf3 Integer\cf4 >\cf3  pageNums\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 		String outputNums \cf4 =\cf3  \cf7 ""\cf4 ;\cf0 \
\cf3 		java\cf4 .\cf3 util\cf4 .\cf3 Iterator\cf4 <\cf3 Integer\cf4 >\cf3  it \cf4 =\cf3  pageNums\cf4 .\cf3 iterator\cf5 ()\cf4 ;\cf0 \
\cf3 		Integer formatControl \cf4 =\cf3  0\cf4 ;\cf0 \
\cf3 		\cf2 while\cf3  \cf5 (\cf3 it\cf4 .\cf3 hasNext\cf5 ())\cf3  \cf5 \{\cf0 \
\cf3 			String thisNum \cf4 =\cf3  it\cf4 .\cf3 next\cf5 ()\cf4 .\cf3 toString\cf5 ()\cf4 ;\cf0 \
\cf3 			outputNums \cf4 +=\cf3  thisNum\cf4 ;\cf0 \
\cf3 			formatControl\cf4 ++;\cf0 \
\cf3 			\cf2 if\cf3  \cf5 (\cf3 formatControl \cf4 <\cf3  pageNums\cf4 .\cf3 size\cf5 ())\cf0 \
\cf3 				outputNums \cf4 +=\cf3  \cf7 ", "\cf4 ;\cf0 \
\cf3 			\cf2 else\cf3  \cf5 \{\cf0 \
\cf3 				outputNums \cf4 +=\cf3  \cf7 "\\r"\cf4 ;\cf0 \
\cf3 			\cf5 \}\cf0 \
\cf3 		\cf5 \}\cf0 \
\cf3 		\cf9 return\cf3  outputNums\cf4 ;\cf0 \
\cf3 	\cf5 \}\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf10 //\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 void\cf3  fileOutput \cf5 (\cf3 String\cf5 []\cf3  outputIndex\cf5 )\cf3  \cf2 throws\cf3  IOException \cf5 \{\cf0 \
\cf3 		XWPFDocument document \cf4 =\cf3  \cf2 new\cf3  XWPFDocument\cf5 ()\cf4 ;\cf0 \
\cf3 		XWPFParagraph tmpParagraph \cf4 =\cf3  document\cf4 .\cf3 createParagraph\cf5 ()\cf4 ;\cf0 \
\cf3 		XWPFRun tmpRun \cf4 =\cf3  tmpParagraph\cf4 .\cf3 createRun\cf5 ()\cf4 ;\cf3 	\cf0 \
\cf3 		tmpRun\cf4 .\cf3 setFontSize\cf5 (\cf3 18\cf5 )\cf4 ;\cf0 \
\cf3 		\cf2 for\cf3  \cf5 (\cf3 String word\cf4 :\cf3  outputIndex\cf5 )\cf3  \cf5 \{\cf0 \
\cf3 			tmpRun\cf4 .\cf3 setText\cf5 (\cf3 word\cf5 )\cf4 ;\cf0 \
\cf3 		\cf5 \}\cf0 \
\cf3 		File file \cf4 =\cf3  \cf2 new\cf3  File\cf5 (\cf7 "/Users/travispettrey/Documents/returndFile.docx"\cf5 )\cf4 ;\cf0 \
\cf3 		document\cf4 .\cf3 write\cf5 (\cf2 new\cf3  FileOutputStream\cf5 (\cf3 file\cf5 ))\cf4 ;\cf0 \
\cf3 		document\cf4 .\cf3 close\cf5 ()\cf4 ;\cf0 \
\cf3 	\cf5 \}\cf0 \
\cf3 	\cf0 \
\cf5 \}}