{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import java.io.*;\
import java.util.ArrayList;\
import java.util.HashMap;\
import java.util.Map.Entry;\
import java.text.*;\
\
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;\
import org.apache.poi.xwpf.usermodel.XWPFDocument;\
import org.apache.poi.xwpf.usermodel.XWPFParagraph;\
import org.apache.poi.xwpf.usermodel.XWPFRun;\
\
\
\
public class Indexing \{\
	\
	static HashMap<String, ArrayList<Integer>> theIndex;\
	\
	// May be able to pull page number from the DOCUMENT ITSELF\
	static Integer wordCount;\
	static Integer lineCount;\
	\
	\
	// May be better to use static variable FOR FILE instead of creating it in fileOutput(). Not sure\
	static File returndFile;\
	\
	\
	\
	@SuppressWarnings("rawtypes")\
	public static void main (String[] args) throws IOException \{\
		\
		theIndex = new HashMap<String, ArrayList<Integer>>();		\
		wordCount = 0;\
        returndFile = new File("/Users/travispettrey/Documents/TestingDoc.docx");\
		String theText = fileInput(returndFile);\
		dataProcessing(theText);\
		String[] outputs = outputFormating(theIndex);\
		fileOutput(outputs);\
//		System.out.println(theText);\
//		dataProcessing(testIt);\
		\
		\
//		java.util.Iterator<Entry<String, ArrayList<Integer>>> it = theIndex.entrySet().iterator();\
//		while (it.hasNext()) \{\
//			HashMap.Entry entry = (HashMap.Entry)it.next();\
//			System.out.println(entry.getKey() + ", " + entry.getValue());\
//		for (String indexEntry: outputFormating(theIndex)) \{\
//			System.out.println(indexEntry);\
//		\}\
	\}\
	\
	\
	\
//	public static String[] breakUpString (String allText) \{\
//		String[] textArray = allText.split("\\\\W+");\
//		return textArray;\
//	\}\
	\
	\
	\
	public static void dataProcessing(String allText) \{\
		String oneWord = "";\
		final CharacterIterator it = new StringCharacterIterator(allText);\
		for(char c = it.first(); c != CharacterIterator.DONE; c = it.next()) \{\
			if (Character.isLetter(c)) \{\
				oneWord += c;\
			\}\
			if ((!Character.isLetter(c)) && oneWord.length() > 0) \{\
				wordCount++;\
				indexAddition(oneWord);\
				oneWord = "";\
			\}\
			else \{\
				continue;\
			\}\
		\}\
	\}\
	\
	\
\
	public static void indexAddition (String fileString) \{\
		if (!theIndex.containsKey(fileString)) \{\
			ArrayList<Integer> insides = new ArrayList<>();\
			insides.add(wordCount);\
			theIndex.put(fileString, insides);\
		\} else \{\
			theIndex.get(fileString).add(wordCount);\
		\}\
	\}\
	\
	\
\
	@SuppressWarnings("resource")\
	public static String fileInput(File file) \{\
		String allText = "";\
	        try \{\
	            FileInputStream fis = new FileInputStream(file.getAbsolutePath());\
	            XWPFDocument document = new XWPFDocument(fis);\
	            XWPFWordExtractor extractor = new XWPFWordExtractor(document);\
	            allText = extractor.getText();\
	        \} catch (Exception exep) \{\
	            exep.printStackTrace();\
	        \}\
            return allText;\
	\}\
	\
	\
	\
	@SuppressWarnings(\{ "rawtypes", "unchecked" \})\
	public static String[] outputFormating (HashMap<String, ArrayList<Integer>> daIndex) \{\
		Integer i = 0;\
		String[] daOutput = new String[daIndex.size()];\
		java.util.Iterator<Entry<String, ArrayList<Integer>>> it = daIndex.entrySet().iterator();\
		while (it.hasNext()) \{\
			String nums = "";\
			HashMap.Entry entry = (HashMap.Entry)it.next();\
			nums += listToString((ArrayList<Integer>) entry.getValue());\
			daOutput[i] = (entry.getKey() + ": " + nums);\
			i++;\
		\}\
		return daOutput;\
	\}\
	\
	\
	//\
	//\
	//\
	//\
	// ABSTRACT METHOD\
	//\
	public static String listToString (ArrayList<Integer> pageNums) \{\
		String nums = "";\
		java.util.Iterator<Integer> it = pageNums.iterator();\
		while (it.hasNext()) \{\
			nums += it.next();\
			nums += ", ";\
		\}\
		return nums;\
	\}\
	//\
	//\
	//\
	\
	\
\
	public static void fileOutput (String[] outputIndex) throws IOException \{\
		XWPFDocument document = new XWPFDocument();\
		XWPFParagraph tmpParagraph = document.createParagraph();\
		XWPFRun tmpRun = tmpParagraph.createRun();	\
		for (String word: outputIndex) \{\
			tmpRun.setText(word);\
			tmpRun.setFontSize(18);\
			tmpRun.addCarriageReturn();\
		\}\
		File file = new File("/Users/travispettrey/Documents/returndFile.docx");\
		document.write(new FileOutputStream(file));\
		document.close();\
	\}\
	\
\}}